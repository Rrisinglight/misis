unit Myclasses;

interface
uses classes, Sysutils, Contnrs, Forms, Windows, Controls, StdCtrls, ComCtrls;

Type TLog=Class(TObject)
private
  mListBox: TListBox;
public
  Time:integer;
  Constructor Create(LB: TListBox);
  procedure Add(S:string);
  property ListBox:TListBox read mListBox;
  function MakeTimeString(Time: integer):string;
  procedure Tick(dt: integer);
end;

Type TInfoRecord=Class(TObject)
private
  mLabel: TLabel;
  mEdit: TEdit;
  mDelta: integer;
public
  Constructor Create(cName: string; cParent: TWinControl; delta: integer);
  Destructor Destroy; override;
  Property InfoLabel: TLabel read mLabel write mLabel;
  Property Edit: TEdit read mEdit write mEdit;
  procedure ChangeCoord(X,Y: integer);
  procedure NextTo(Rec: TInfoRecord; delta: integer);
end;

Type TIntegerSelect=Class(TObject)
private
  mNameLabel: TLabel;
  mEdit: TEdit;
  mUpDown: TUpDown;
  mValue: integer;
  mText: string;
public
  Constructor Create(cName: string; cParent: TWinControl);
  procedure ChangeCoord(X,Y: integer);
  procedure ChangeValue(Sender: TObject; var AllowChange: Boolean;NewValue: Smallint; Direction: TUpDownDirection);
  property Text:string read mText write mText;
  property Edit:TEdit read mEdit write mEdit;
  property UpDown:TUpDown read mUpDown write mUpDown;
  procedure SetBorders(Min,Max,Value: integer);
end;

Type TIntegerInput=Class(TObject)
  Value:integer;
  Edit: TEdit;
  Constructor Create(cValue: integer; cParent: TWinControl);
  procedure CheckNum(Sender: TObject; var Key: Char);
End;

Type TMinMaxSelect=Class(TObject)
private
  mNameLabel: TLabel;
  mMin: TIntegerSelect;
  mMax: TIntegerSelect;
  mName: string;
public
  Constructor Create(cName: string; cParent: TWinControl);
  property Min:TIntegerSelect read mMin write mMin;
  property Max:TIntegerSelect read mMax write mMax;
  procedure ChangeCoord(X,Y: integer);
end;

Type TInfoControls=Class(TObject)
private
  mForm: TForm;
  mGroupBox: TGroupBox;
  mStateInfo: TInfoRecord;
  mQueueInfo: TInfoRecord;
  mWaitInfo: TInfoRecord;
  mWorkInfo: TInfoRecord;
  mWaitPercent: TInfoRecord;
  mName: string;
  mDelta: integer;
  mLeft: integer;
public
  Constructor Create(cName: string; cParent: TWinControl);
  Destructor Destroy; override;
  Property Name: string read mName write mName;
  Property GroupBox: TGroupBox read mGroupBox write mGroupBox;
  Property StateInfo: TInfoRecord read mStateInfo write mStateInfo;
  Property QueueInfo: TInfoRecord read mQueueInfo write mQueueInfo;
  Property WaitInfo: TInfoRecord read mWaitInfo write mWaitInfo;
  Property WorkInfo: TInfoRecord read mWorkInfo write mWorkInfo;
  Property WaitPercent: TInfoRecord read mWaitPercent write mWaitPercent;
  procedure ChangeCoord(X,Y: integer);
  procedure RightTo(IC: TInfoControls; delta: integer);
end;

implementation

Constructor TIntegerSelect.Create(cName: string; cParent: TWinControl);
begin
  mText := ' сек.';

  mNameLabel := TLabel.Create(cParent);
  mNameLabel.Parent := cParent;
  mNameLabel.Caption := cName;

  mEdit := TEdit.Create(cParent);
  mEdit.Parent := cParent;
  mEdit.ReadOnly := True;
  mEdit.Width := 50;

  mUpDown := TUpDown.Create(cParent);
  mUpDown.Parent := cParent;

  mEdit.Text := IntToStr(mUpDown.Position) + mText;
end;

procedure TIntegerSelect.ChangeCoord(X,Y: integer);
begin
  mNameLabel.Left := X;
  mNameLabel.Top := Y;

  mEdit.Left := X + mNameLabel.Width + 10;
  mEdit.Top :=  mNameLabel.Top + mNameLabel.Height - mEdit.Height;

  mUpDown.Height := mEdit.Height;
  mUpDown.Top := mEdit.Top;
  mUpDown.Left := mEdit.Left + mEdit.Width;

  mUpDown.OnChangingEx := ChangeValue;
end;

procedure TIntegerSelect.ChangeValue(Sender: TObject; var AllowChange: Boolean;
  NewValue: Smallint; Direction: TUpDownDirection);
begin
  if (mUpDown.Min<=NewValue)and(mUpDown.Max>=NewValue) then
  mEdit.Text := IntToStr(NewValue) + mText;
end;

procedure TIntegerSelect.SetBorders(Min,Max,Value: integer);
begin
  mUpDown.Min := Min;
  mUpDown.Max := Max;
  mUpDown.Position := Value;
end;

procedure TMinMaxSelect.ChangeCoord(X,Y: integer);
begin
  mNameLabel.Left := X;
  mNameLabel.Top := Y;

  mMin.ChangeCoord(X,Y+30);
  mMax.ChangeCoord(X,Y+60);
end;

Constructor TMinMaxSelect.Create(cName: string; cParent: TWinControl);
begin
  mNameLabel := TLabel.Create(cParent);
  mNameLabel.Parent := cParent;
  mName := cName;
  mNameLabel.Caption := mName;

  mMin:= TIntegerSelect.Create('от ',cParent);
  mMax:= TIntegerSelect.Create('до ',cParent);

  ChangeCoord(0,0);
end;

Constructor TLog.Create(LB: TListBox);
begin
  mListBox := LB;
  Time := 36000;
end;

procedure TLog.Tick(dt: integer);
begin
  Time := Time + dt;
end;

procedure TLog.Add(S:string);
begin
  mListBox.AddItem('['+MakeTimeString(Time)+']: '+ S,mListBox);
  mListBox.ItemIndex := mListBox.Items.Count - 1;
end;

function TLog.MakeTimeString(Time: integer):string;
var s,m,h : integer;
    s1,s2,s3: string;
begin
  s := Round(Time);
  h := s div 3600;
  s := s - h*3600;
  if h>23 then h := 0;
  m:= s div 60;
  s := s - m*60;
  if s<10 then s1 := '0' else s1 := '';
  if m<10 then s2 := '0' else s2 := '';
  if h<10 then s3 := '0' else s3 := '';

  
  //Result := s3 + IntToStr(h) + ':' + s2 + IntToStr(m) + ':' + s1 + IntToStr(s);
  Result := s3 + IntToStr(h) + ':' + s2 + IntToStr(m);
end;

Constructor TInfoRecord.Create(cName: string; cParent: TWinControl; delta: integer);
begin
  mLabel := TLabel.Create(cParent);
  mLabel.Parent := cParent;
  mLabel.Caption := cName;

  mEdit := TEdit.Create(cParent);
  mEdit.Parent := cParent;
  mEdit.ReadOnly := True;
  mEdit.Width := 65;
  mDelta := delta;
end;

Destructor TInfoRecord.Destroy;
begin
  inherited;
end;

procedure TInfoRecord.ChangeCoord(X,Y: integer);
begin
  mLabel.Left := X;
  mLabel.Top := Y;

  mEdit.Top := mLabel.Top + mLabel.Height - mEdit.Height;
  mEdit.Left := mLabel.Left + mDelta;
end;

procedure TInfoRecord.NextTo(Rec: TInfoRecord; delta: integer);
begin
  mLabel.Left := Rec.InfoLabel.Left;
  mLabel.Top := Rec.InfoLabel.Top + Rec.InfoLabel.Height + delta;

  mEdit.Top := mLabel.Top + mLabel.Height - mEdit.Height;
  mEdit.Left := mLabel.Left + mDelta;
end;

Constructor TInfoControls.Create(cName: string; cParent: TWinControl);
begin
  mName := cName;
  mDelta := 20;
  mLeft := 10;
  mGroupBox := TGroupBox.Create(cParent);
  mGroupBox.Parent := cParent;
  mGroupBox.Caption := mName;
  //mGroupBox.Height := 180;
  //mGroupBox.Width := 150;

  mStateInfo := TInfoRecord.Create('Состояние: ', mGroupBox, 150);
  mStateInfo.ChangeCoord(mLeft,25);

  mQueueInfo := TInfoRecord.Create('Очередь: ', mGroupBox, 150);
  mQueueInfo.NextTo(mStateInfo, mDelta);

  mWaitInfo := TInfoRecord.Create('Простой: ', mGroupBox, 150);
  mWaitInfo.NextTo(mQueueInfo, mDelta);

  mWorkInfo := TInfoRecord.Create('Работа: ', mGroupBox, 150);
  mWorkInfo.NextTo(mWaitInfo, mDelta);

  mWaitPercent := TInfoRecord.Create('К-т простоя: ', mGroupBox, 150);
  mWaitPercent.NextTo(mWorkInfo, mDelta);

  mGroupBox.Height := mWaitPercent.InfoLabel.Top + 30;
  mGroupBox.Width := mWaitPercent.Edit.Left + mWaitPercent.Edit.Width + 10;
end;

Destructor TInfoControls.Destroy;
begin
  inherited;
end;

procedure TInfoControls.ChangeCoord(X,Y: integer);
begin
  mGroupBox.Left := X;
  mGroupBox.Top := Y;
end;

procedure TInfoControls.RightTo(IC: TInfoControls; delta: integer);
begin
  mGroupBox.Top := IC.GroupBox.Top;
  mGroupBox.Left := IC.GroupBox.Left + IC.GroupBox.Width + delta;
end;

Constructor TIntegerInput.Create(cValue: integer; cParent: TWinControl);
begin
  Value:=cValue;
  Edit := TEdit.Create(cParent);
  Edit.Parent := cParent;
  Edit.Text := IntToStr(cValue);
  Edit.Width := 30;
  Edit.OnKeyPress := CheckNum;
end;

procedure TIntegerInput.CheckNum(Sender: TObject; var Key: Char);
const Digit: Set of Char=['0' .. '9'];
begin
  if not (Key in Digit) then Key:=#0;
  Value := StrToInt(Edit.Text + Key);
end;

end.

