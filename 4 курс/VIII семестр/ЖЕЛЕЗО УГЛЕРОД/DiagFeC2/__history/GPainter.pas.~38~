unit GPainter;

interface
uses classes, Graphics, Types, Contnrs;

type TCoord = packed record
   X: Double;
   Y: Double;
end;
function Coord(X,Y:Double):TCoord;

Type TGraphicObject=Class(TObject)
public
  Canvas:TCanvas;
  ObjType: string;
  Name: string;
  Points: array of TPoint;
  Coords: array of TCoord;
  BgColor:TColor;
  Constructor Create(cCanvas: TCanvas; cName:string);
  procedure Draw;virtual; abstract;
  procedure SetCoords(cCoords:array of TCoord);
end;

Type TPolygon=Class(TGraphicObject)
public
  Constructor Create(cCanvas: TCanvas; cName:string);
  procedure Draw;override;
end;

Type TPolyLine=Class(TGraphicObject)
public
  Constructor Create(cCanvas: TCanvas; cName:string);
  procedure Draw;override;
end;

Type TText=Class(TGraphicObject)
public
  Constructor Create(cCanvas: TCanvas; cName:string);
  procedure Draw;override;
end;

Type TGraphicPainter=Class(TObject)
private
  mCanvas: TCanvas;
public
  Xmin,Xmax:Double;
  Ymin,Ymax:Double;
  Width,Height:integer;
  Margin:integer;
  Figures:TObjectList;
  Constructor Create(cCanvas: TCanvas);
  property Canvas:TCanvas read mCanvas;
  function toX(x:Double):Integer;
  function toY(y:Double):Integer;
  function fromX(x:Integer):Double;
  function fromY(y:Integer):Double;
  function P(x,y:Double):TPoint; // Перевод координат в экранные
  procedure SetXRange(min,max:Double);
  procedure SetYRange(min,max:Double);
  procedure SetSize(w,h:integer);
  procedure SetMargins(m:integer);
  procedure DrawNet;
  procedure DrawFigures;
  procedure AddPolygon(Name:string; Coords:array of TCoord; Color:TColor);
  procedure AddPolyLine(Name:string; Coords:array of TCoord);
  procedure AddText(Name:string; Coord: TCoord);
  procedure Repaint;
  procedure ConvertCtoP(Coords:array of TCoord;var Points:array of Tpoint);
end;

implementation

function Coord(X,Y:Double):TCoord;
begin
  Result.X := X;
  Result.Y := Y;
end;

/////////////////////////
///  TGraphicObject
/////////////////////////

Constructor TGraphicObject.Create(cCanvas: TCanvas; cName:string);
begin
  Canvas := cCanvas;
  Name := cName;
end;

procedure TGraphicObject.SetCoords(cCoords:array of TCoord);
var i:integer;
begin
  SetLength(Coords,High(cCoords)+1);
  for i := 0 to High(cCoords) do
  begin
    Coords[i] := cCoords[i]
  end;
end;

/////////////////////////
///  TPolygon
/////////////////////////

Constructor TPolygon.Create(cCanvas: TCanvas; cName:string);
begin
  inherited;
  ObjType := 'Polygon';
end;

procedure TPolygon.Draw;
begin
  Canvas.Brush.Color := BgColor;
  Canvas.Polygon(Points);
  Canvas.Brush.Color := clBlack;
end;

/////////////////////////
///  TPolyLine
/////////////////////////

Constructor TPolyLine.Create(cCanvas: TCanvas; cName:string);
begin
  inherited;
  ObjType := 'PolyLine';
end;

procedure TPolyLine.Draw;
begin
  Canvas.Polyline(Points);
end;

/////////////////////////
///  TText
/////////////////////////

Constructor TText.Create(cCanvas: TCanvas; cName:string);
begin
  inherited;
  ObjType := 'Text';
end;

procedure TText.Draw;
var X,Y:Integer;
    OldStyle:TBrushStyle;
begin
   X:=Points[0].X;
   Y:=Points[0].Y;
   X:=X - Round(Canvas.TextWidth(Name)/2);
   Y:=Y - Round(Canvas.TextHeight(Name)/2);

   OldStyle := Canvas.Brush.Style;
   Canvas.Brush.Style := bsClear;
   Canvas.TextOut(X,Y,Name);
   Canvas.Brush.Style := OldStyle;
end;

/////////////////////////
///  TGraphicPainter
/////////////////////////

Constructor TGraphicPainter.Create(cCanvas: TCanvas);
begin
  mCanvas := cCanvas;
  SetMargins(5);
  Figures:=TObjectList.Create;
end;

procedure TGraphicPainter.DrawNet;
var cX,cY:Double;
begin
  with mCanvas do
  begin
    //линии
    if Xmin>0 then cX:=Xmin else cX := 0;
    if Ymin>0 then cY:=Ymin else cY := 0;

    Polyline([P(Xmin,cY),P(Xmax,cY)]);
    Polyline([P(cX,Ymin),P(cX,Ymax)]);
    //стрелки
    Polyline([Point(toX(Xmax)-5,toY(cY)-3),P(Xmax,cY),Point(toX(Xmax)-5,toY(cY)+3)]);
    Polyline([Point(toX(cX)-3,toY(Ymax)+5),P(cX,Ymax),Point(toX(cX)+3,toY(Ymax)+5)]);
  end;
end;

procedure TGraphicPainter.DrawFigures;
var i:integer;
    buf:TGraphicObject;
begin
  for i := 0 to Figures.Count - 1 do
    begin
      buf:=(Figures[i] as TGraphicObject);
      ConvertCtoP(buf.Coords,buf.Points);
      buf.Draw;
    end;
end;

procedure TGraphicPainter.ConvertCtoP(Coords:array of TCoord;var Points:array of Tpoint);
var i:integer;
begin
  for i := 0 to High(Coords) do
  begin
    Points[i] := P(Coords[i].X,Coords[i].Y);
  end;
end;

procedure TGraphicPainter.AddPolygon(Name:string; Coords:array of TCoord; Color:TColor);
var buf:TPolygon;
begin
   buf:=TPolygon.Create(mCanvas,Name);
   buf.SetCoords(Coords);
   SetLength(buf.Points, High(Coords)+1);
   buf.BgColor := Color;
   Figures.Add(buf);
end;

procedure TGraphicPainter.AddPolyLine(Name:string; Coords:array of TCoord);
var buf:TPolyLine;
begin
   buf:=TPolyLine.Create(mCanvas,Name);
   buf.SetCoords(Coords);
   SetLength(buf.Points, High(Coords)+1);
   Figures.Add(buf);
end;

procedure TGraphicPainter.AddText(Name:string; Coord: TCoord);
var buf:TText;
begin
   buf:=TText.Create(mCanvas,Name);
   buf.SetCoords([Coord]);
   SetLength(buf.Points, 1);
   Figures.Add(buf);
end;

procedure TGraphicPainter.Repaint();
var OldWidth:integer;
begin
  // Очистка
  Canvas.Brush.Color := clWhite;
  Canvas.FillRect(Rect(0, 0, Width, Height));

  // Фигуры
  DrawFigures;

  // Сетка
  OldWidth := Canvas.Pen.Width;
  Canvas.Pen.Width := 2;
  DrawNet;
  Canvas.Pen.Width := OldWidth;
end;

procedure TGraphicPainter.SetXRange(min,max:Double);
begin
  Xmin:=min;
  Xmax:=max;
end;

procedure TGraphicPainter.SetYRange(min,max:Double);
begin
  Ymin:=min;
  Ymax:=max;
end;

procedure TGraphicPainter.SetSize(w,h:integer);
begin
  Width := w;
  Height := h;
end;

procedure TGraphicPainter.SetMargins(m:integer);
begin
  Margin:=m;
end;

function TGraphicPainter.toX(x:Double):Integer;
begin
  Result := Round(Margin + (x-Xmin)*(Width-2*Margin)/(Xmax-Xmin));
end;

function TGraphicPainter.toY(y:Double):Integer;
begin
  Result := Round(Height - Margin - (y-Ymin)*(Height-2*Margin)/(Ymax-Ymin));
end;

function TGraphicPainter.P(x,y:Double):TPoint;
begin
  Result := Point(toX(x),toY(y));
end;

function TGraphicPainter.fromX(x:Integer):Double;
begin
  Result := (x-Margin)*(Xmax-Xmin)/(Width-2*Margin) + Xmin;
end;

function TGraphicPainter.fromY(y:Integer):Double;
begin
  Result := (Height-y-Margin)*(Ymax-Ymin)/(Height-2*Margin) + Ymin;
end;

end.
