Program KursRab;
uses CRT;
var
   c,                             {переменная для выбора пункта меню}
   col:byte;                      {переменная для цвета}
   k:char;                        {переменная для считывания нажатой клавиши}
   result:text;                   {файловая переменная}
   f:boolean;                     {если истина, то разрешается запись в файл}

(*-*-* процедура создания окна по заданным координатам,
заданным цветом фона и текста, с введённой надписью *-*-*)
procedure Okno(tb,tc,x1,y1,x2,y2:byte;str:string);
begin
     textbackground(tb);           {задание цвета фона  }
     textcolor(tc);                {задание цвета текста}
     window(x1,y1,x2,y2);          {создание окна       }
     clrscr;                       {очистка экрана      }
     write(str);                   {ввод строки         }
end;

(*-*-* титульный лист *-*-*)
procedure TitulList;
begin
    okno(0,0,17,8,67,18,'');                         {тень            }
    okno(7,0,15,7,65,17,'');                         {основное окно   }
    writeln;                                         {текст титульного}
    writeln;                                         {       листа    }
    writeln(' Курсовая работа по курсу "Введение в информатику"');
    writeln;
    writeln('          Выполнил: студент группы ДИС-2000');
    writeln('                    Елисеев Руслан Сергеевич');
    writeln;
    writeln('                     Вариант 11');
    writeln;
    writeln('                                 27 апреля 2001 г.');
end;

(*-*-* меню "Корни" *-*-*)
procedure B1;
begin
    Okno(col,0,1,1,9,1,'  Корни');
end;

(*-*-* меню "Интеграл" *-*-*)
procedure B2;
begin
    Okno(col,0,10,1,20,1,' Интеграл');
end;

(*-*-* меню "Диф.Уравнение" *-*-*)
procedure B3;
begin
    Okno(col,0,21,1,35,1, 'Диф. уравнение');
end;

(*-*-* меню "Ряд" *-*-*)
procedure B4;
begin
    Okno(col,0,36,1,42,1,'  Ряд');
end;

(*-*-* меню "Сохранить" *-*-*)
procedure B5;
begin
    Okno(col,0,43,1,52,1,'Сохранить');
end;

(*-*-* меню "Помощь" *-*-*)
procedure B6;
begin
    Okno(col,0,53,1,65,1,' Помощь(F1)');
end;

(*-*-* меню "Выход" *-*-*)
procedure B7;
begin
    Okno(col,0,66,1,80,1,' Выход (ESC)');
end;

(*-*-* создание окна для вычислений, верхней и нижней панели *-*-*)
procedure Main;
begin
     Okno(3,0+Blink,1,25,79,25,'              Курсовая работа Елисеева Руслана');
                                        {нижняя панель      }
     B1;B2;B3;B4;B5;B6;B7;              {верхняя панель     }
     Okno(1,0,1,2,80,24,'');            {окно для вычислений}
end;

(*-*-* вычисление корня уравнения методом Ньютона *-*-*)
procedure KORNI;
const
   a=0;            {начальная точка промежутка}
   b=1;            {конечная точка промежутка}
   e=0.001;        {погрешность}
var
    x,             {независимая переменная}
    y,             {очередное приближение}
    p:real;        {условие}
begin
    Main;          {вызов процедуры Main}
    textcolor(15); {задание цвета текста}
    x:=0;          {присвоение независимой переменной начала отрезка}
    repeat
      y:=x-(exp(x)-1/exp(x)-2)/(exp(x)+exp(-x));{вычисление приближения}
      p:=abs(y-x);                              {вычисляется условие}
      x:=y;                                     {независимой переменной
                                                 присваивается приближение}
    until p<=e;                                 {пока не выполняется условие}
    writeln;
    writeln('      Уравнение e^x-e^(-x)-2=0 имеет на отрезке [0;1] корень x=',x:1:4);
    write('                     /метод Ньютона/');
(*-*-* запись в файл, если f=true *-*-*)
    if f then
    begin
       writeln(result);
       writeln(result,'      Уравнение e^x-e^(-x)-2=0 имеет на отрезке [0;1] корень x=',x:1:4);
       writeln(result,'                     /метод Ньютона/');
    end;
end;

(*-*-* процедура вычисления интеграла методом Симпсона *-*-*)
procedure INTEGRAL;
const
  a=0;                {начальная точка данного отрезка}
  b=3;                {конечная точка данного отрезка}
  n2=36;              {отрезок интегрирования разбили на n2=20 частей}
var
    w,              {дополнительная переменная для простоты записи выражения}
    x,              {независимая переменная (аргумент)}
    h,              {шаг}
    S:real;         {сумма}
    c:integer;
begin
    Main;                {очистка главного окна перед вычислениями}
    h:=(b-a)/n2;         {вычисление шага}
    x:=0;                {начальное значение x}
    c:=1;                {начальное значение с}
    S:=0.5974;           {начальное значение суммы}
    repeat
      x:=x+h;            {увеличение аргумента на шаг интегрирования}
      w:=x/(1+x);        {вычисляем выражение стоящее под знаком арксинуса}
      S:=S+(3+c)*2*arctan(w/sqrt(1-sqr(w)));{прибавляем к сумме очередное слагаемое}
      c:=-1;             {меняем знак с на противоположный}
    until x>=b-h;        {проверка условия}
    S:=S*(h/3);          {умножение суммы на необходимый коэффициент}
    textcolor(15);       {задаём цвет текста}
    writeln;             {вывод на дисплей результата}
    writeln('   Интеграл arcsin(sqrt(x/(x+1))) на промежутке [0;3] = ',S:4:4);
    writeln('                        /метод Симпсона/');
(*-*-* запись в файл, если f=true *-*-*)
    if f then
    begin
       writeln(result);
       writeln(result,'   Интеграл arcsin(sqrt(x/(x+1))) на промежутке [0;3] = ',S:4:4);
       writeln(result,'                        /метод Симпсона/');
    end;
end;

(*-*-* процедура решения дифференциального уравнения  *-*-*)
procedure DIFFER;
const
    a=0;                        {начальное значение отрезка интегрирования}
    b=1;                        {конечное значение отрезка интегрирования}
    h=0.1;                      {шаг}
var
    z,                          {дополнительная переменная}
    x,                          {аргумент}
    p,                          {производная в точке}
    t,                          {точное значение}
    r:real;                     {приближенное значение}
begin
    Main;                       {очистка главного окна перед вычислениями}
    textcolor(15);              {задание цвета текста}
    x:=a;                       {начальное значение х}
    r:=-0.9;                    {приближенное значение в начальной точке}
    p:=3.2;                     {производная в начальной точке}
    writeln;                    {вывод на дисплей условий}
    writeln('        Значения дифференциального уравнения y``+ y`-6y = 3x^2 - x -1');
    writeln('          при y(0)=-0.9, y`(0)=3.2 на отрезке [0;1] с шагом = 0.1 : ');
    gotoxy(12,7);
    writeln('   аргумент         точное решение       приближенное решение');
    writeln;
(*-*-* запись условий в файл, если f=true *-*-*)
    if f then
    begin
      writeln(result);
      writeln(result,'        Значения дифференциального уравнения y``+ y`-6y = 3x^2 - x -1');
      writeln(result,'          при y(0)=-0.9, y`(0)=3.2 на отрезке [0;1] с шагом = 0.1 : ');
      writeln(result);
      writeln(result,'               аргумент         точное решение       приближенное решение');
      writeln(result);
    end;
(*-*-* цикл вычислений *-*-*)
    repeat
       z:=p+h*(3*sqr(x)-x-1-p+6*r);             {дополнительной переменной
                                                 присваивается значение
                                                 p в точке x               }
       r:=r+h*p;                                {приближенное значение     }
       p:=z;
       x:=x+h;                                  {новое значение x          }
       t:=0.1*exp(2*x)-exp(-3*x)-0.5*sqr(x);    {точное вычисление функции }
(*\* вывод результов на дисплей */*)
       write('             ',x:8:4);
       write('             ',t:8:4);
       writeln('             ',r:8:4);
(*-*-* запись в файл результатов, если f=true *-*-*)
       if f then
       begin
          write(result,'             ',x:8:4);
          write(result,'             ',t:8:4);
          writeln(result,'             ',r:8:4);
       end;
    until x>b;             {до последнего значения отрезка интегрирования}

end;

(*-*-* процедура вычисления ряда  *-*-*)
procedure RIAD;
   var
   s,                    {сумма}
   x,                    {аргумент}
   y,                    {функция}
   h,                    {шаг}
   t,                    {элемент суммы}
   p:real;               {факториал}
   n:byte;               {порядковый номер элемента суммы}
begin
   Main;                    {очистка главного окна перед вычислениями}
   textcolor(15);           {задание цвета текста}
   x:=0.1;                  {начальное значение х}
   h:=(1-0.1)/10;           {вычисление значения шага}
   writeln;
   writeln('            Значения суммы S = 1+3*(x^2)+...+((2*n+1)/n!)*x^2*n');
   writeln('            и функции y=(1+2*(x^2))*e^x^2 на отрезке [0.1;1] : ');
   gotoxy(12,7);
   writeln('   аргумент              сумма               функция');
   writeln;
(*-*-* запись в файл, если f=true *-*-*)
   if f then
   begin
     writeln(result);
     writeln(result,'            Значения суммы S = 1+3*(x^2)+...+((2*n+1)/n!)*x^2*n');
     writeln(result,'            и функции y=(1+2*(x^2))*e^x^2 на отрезке [0.1;1] : ');
     writeln(result,'               аргумент              сумма               функция');
     writeln(result);
   end;
(*-*-* цикл вычислений *-*-*)
   repeat
     s:=1; {начальное значение суммы}
     p:=1; {начальное значение факториала (1!=1)}
     t:=0; {начальное значение элемента суммы}
     for n:=1 to 10 do
     begin
       p:=p*n;                       {вычисление факториала}
       t:=((2*n+1)*exp(2*n*ln(x)))/p;{вычисление очередного элемента суммы}
       s:=s+t;                       {увеличение суммы на очередной элемент}
     end;
     y:=(1+2*sqr(x))*exp(sqr(x));   {присвоение переменной y значение функции}
     write('             ',x:8:4);  {вывод значений на дисплей}
     write('             ',s:8:4);
     writeln('             ',y:8:4);
(*-*-* запись в файл, если f=true *-*-*)
     if f then
     begin
         write(result,'             ',x:8:4);
         write(result,'             ',s:8:4);
         writeln(result,'             ',y:8:4);
     end;
     x:=x+h;                     {увеличение значения переменной x на шаг}
   until x>1;                    {вычислять до конца промежутка, включительно}
end;

(*-*-* процедура, определяющая наличие ошибки при записи в файл *-*-*)
procedure dont;
begin
   IF IOResult <>0 THEN
      begin
         Main;
         textcolor(15);
         writeln;
         writeln('  Операция записи не может быть осуществлена');
         writeln('  Нажмите любую клавишу для выхода из программы');
      end
      ELSE Exit;
   repeat until keypressed;
   Halt;
end;

(*-*-* процедура, осуществляющая запись в файл *-*-*)
procedure SAVE;
begin
     Assign(result,'result.pas');{связать файловую перем. с result.pas}
{$I-}                            {деректива отключения контроля
                                             ошибок ввода(вывода)}
     Rewrite(result);            {создать новый или очистить существующий файл}
     dont;                       {проверка на наличие ошибок}
{$I+}                            {деректива подключения контроля
                                             ошибок ввода(вывода)}
     f:=true;                    {разрешает записывать в файл данные}
     KORNI;                      { вызов всех          }
     INTEGRAL;                   { процедур с решениями}
     DIFFER;                     { для записи          }
     RIAD;                       { данных  в файл      }
     Main;                       {очистка главного окна}
     textcolor(15);
     gotoxy(10,7);
     writeln('Вы можете продолжить работу после нажатия на любую клавишу');
     f:=false;                   {запрещается записывать данные в файл}
     close(result);              {закрытие файла}
     repeat until keypressed;
     Main;                       {очистка главного окна}
end;

(*-*-* процедура ПОМОЩЬ *-*-*)
procedure HELP;
begin
     Main;
     Okno(0,0,12,6,72,21,'');
     Okno(3,1,10,5,70,20,'');
     writeln;
     writeln('       *** F1 *** ПОМОЩЬ *** HELP *** ПОМОЩЬ *** F1 ***');
     writeln('              КАК ПОЛЬЗОВАТЬСЯ ДАННОЙ ПРОГРАММОЙ');
     writeln;
     writeln('      Клавишами курсора вправо и влево вы можете выбирать ');
     writeln('  требуемый пункт меню. При нажатии клавиши Enter вы ');
     writeln('  запускаете данную опцию.');
     writeln('      Выход из программы осуществляется при активизации');
     writeln('   опции "Выход", либо при нажатии клавиши Esc.');
     writeln('      Сохранение результатов вычислений  в файл result.pas ');
     writeln(' - опция "Сохранить".');
     writeln('      Помощь - опция "Помощь", клавиша F1.');
     writeln('      Для возвращения к работе нажмите любую клавишу.');
     writeln;
     writeln('                         ЖЕЛАЮ УДАЧИ!!!     /автор/');
     repeat until keypressed;    {после нажатия на любую клавишу}
     Main;                       {очистка главного окна}
end;

(*-*-* процедура, осуществляющая выбор определенной опции в меню *-*-*)
procedure Vibor;
begin
   k:=ReadKey;                                  {считывание нажатой клавиши}
   IF k=#75 THEN IF c=1 THEN c:=7 ELSE c:=c-1;  {перевод курсора влево}
   IF k=#77 THEN IF c=7 THEN c:=1 ELSE c:=c+1;  {перевод курсора вправо}
   IF c=1 THEN begin col:=2;B1 end ELSE begin col:=7;B1 end; {окраска       }
   IF c=2 THEN begin col:=2;B2 end ELSE begin col:=7;B2 end; {"кнопки" меню }
   IF c=3 THEN begin col:=2;B3 end ELSE begin col:=7;B3 end; {в определенный}
   IF c=4 THEN begin col:=2;B4 end ELSE begin col:=7;B4 end; {цвет,         }
   IF c=5 THEN begin col:=2;B5 end ELSE begin col:=7;B5 end; {если выбор    }
   IF c=6 THEN begin col:=2;B6 end ELSE begin col:=7;B6 end; {стоит/не стоит}
   IF c=7 THEN begin col:=2;B7 end ELSE begin col:=7;B7 end; {на нём        }
end;

(*-*-* процедура, осуществляющая активизацию выбранной опции в меню *-*-*)
procedure Active;
begin
     IF k=#59 THEN HELP;       {окно "ПОМОЩЬ" при нажатии F1}
     IF k=#13 THEN             {при нажатии клавиши Enter}
     case c of
         1: KORNI;             {активизируются окна от "КОРНИ" до "ИНТЕГРАЛ"}
         2: INTEGRAL;          {в зависимости от того, на каком пунке меню}
         3: DIFFER;            {был остановлен выбор}
         4: RIAD;
         5: SAVE;
         6: HELP;
         7: Halt;
     end;
end;

(*-*-* ГЛАВНАЯ ПРОГРАММА *-*-*)
BEGIN
   col:=7;                    {переменной цвета присваиваем значение серого}
   f:=false;                  {запрещаем запись до момента выбора "Сохранить"}
   Main;                      {очистка главного окна}
   TitulList;                 {вывод на дисплей титульного листа}
   repeat until keypressed;   {до нажатия на любую клавишу}
   Main;                      {очистка главного окна}
   c:=1;                      {выбор на пункте "Корни"}
   repeat
     Vibor;                   {выбор определенной опции в меню}
     Active                   {активизация выбранной опции}
   until k=#27;               {продолжается до нажатия на клавишу ESC}
END.